<canvas id="map" width="800" height="700"></canvas>
<% content_for :head do %>
  <script>
    var canvas;
    var context;
    var bg;
    var warband;
    var mapWidth = 800;//$('#map')[0].width;
    var mapHeight = 700; //$('#map')[0].height;
    var mapItems = new Array();

    // canvas width and height must be divisible by 100
    var regionWidth = 100;
    var regionHeight = 100;

    var cols = mapWidth/regionWidth;
    var rows = mapHeight/regionHeight;

    var regions = new Array(cols);
    regions[0] = new Array(rows);

    var offset = Object();
    offset.x = 40;
    offset.y = 40;

    // Do when document is ready
    $(document).ready( function() {

      // Register a click handler on the canvas (#map)
      $("#map").live("click", function(e) {
        // Get the clicked position
        var pos = getCursorPosition(e);

        var x = Math.floor(pos.x/regionWidth);
        var y = Math.floor(pos.y/regionHeight);
        var region = getRegion(x,y);

        // Update the Warband position (database) by sending a PUT request and
        // then the positon of the warband (javascript object) upon success
        var url = "<%= warband_path(@warband) %>"; // Go to warbands/:id path
        var data = { "warband[region_id]": region.id,
                     "_method": "put" }; // Use warbands#update (not show)
        $.post(url, data, updateWarbandPosition, "json");

        return false;
      });
  
      initRegions();

      // Get the canvas
      canvas = $("#map")[0];
  
      // Try to get the context
      if(canvas.getContext) {
        context = canvas.getContext('2d');
  
        // stop the user getting a text cursor
        canvas.onselectstart = function()
        {
            return false;
        };

        // Create a background object
        bg = new Object();
        bg.img = new Image();
        bg.img.src = 'images/map_bg.png';
        bg.x = -100;
        bg.y = 0;
        bg.img.onload = function() {
          redraw();
        };

        // Create a Warband object
        warband = new Object();
        warband.img = new Image();
        warband.img.src = 'images/huskarl.png';
        warband.img.onload = function() {
          redraw();
        };
        // Get the initial position of the Warband
        warband.x = <%= @warband.region.pos_x %>+offset.x;
        warband.y = <%= @warband.region.pos_y %>+offset.y;

        // Add all the objects to be drawn
        mapItems.push(bg);
        mapItems.push(warband)

      } else { // No context available
        alert("Sorry, but the Canvas element is not supported by your browser!");
      }
    });

    // Update the Warband position from the specified data (.json) and redraw
    function updateWarbandPosition(data) {
      var region = findRegion(data['warband']['region_id']);
      warband.x = region.x*regionWidth + offset.x;
      warband.y = region.y*regionHeight + offset.y;
      redraw();
    }

    function findRegion(id) {
      for(var c = 0; c < cols; c++) {
        for(var r = 0; r < rows; r++) {
          if (regions[c][r].id == id) {
            return regions[c][r];
          }
        }
      }
    }

    function getRegion(x, y) {
      return regions[x][y];
    }
  
    // Redraw all the images (mapItems) of the canvas context
    function redraw() {
      // Clear the canvas
      clearCanvas();
      // Draw all images (from mapItems array)
      for (var obj in mapItems) {
        context.drawImage(mapItems[obj].img, mapItems[obj].x, mapItems[obj].y);
      }
    }

    // Get the cursor position (pos.x and pos.y) from the specified event e
    function getCursorPosition(e) {
      var x;
      var y;
      if (e.pageX != undefined && e.pageY != undefined) {
        x = e.pageX;
        y = e.pageY;
      } else {
        x = 0;
        y = 0;
      }
  
      x -= canvas.offsetLeft;
      y -= canvas.offsetTop;
  
      //x = Math.floor(x/80)*80+29;
      //y = Math.floor(y/80)*80+24;
  
      var pos = new Object();
      pos.x = x;
      pos.y = y;
      return pos;
    }
  
    // Clear the canvas
    function clearCanvas() {
      context.clearRect(0, 0, canvas.width, canvas.height);
      var w = canvas.width;
      canvas.width = 1;
      canvas.width = w;
    }

    // Get and initialize all the Regions 
    function initRegions() {
      <% @regions.each do |r| %>
        var region = new Object();
        var data = JSON.parse("<%= r.to_json %>".replace(/&quot;/gi, '"'));
        data = data["region"];
        region.id = data["id"];
        region.x = data["pos_x"];
        region.y = data["pos_y"];
        region.name = data["name"];
        region.desc = data["desc"];
        regions[region.x][region.y] = region;
      <% end %>
    }
  </script>
<% end %>
