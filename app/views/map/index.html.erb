<div class="grid_6 alpha">
  <canvas id="map" width="500" height="500">
  </canvas>
</div>
<div id="current_region" class="grid_3 omega">
  <h2><%= link_to @warband.region.name, @warband.region.template %></h2>
  <p>
    <%= @warband.region.desc %>
  </p>
  <% if @warband.region.enemies.count > 0 %>
    <h3>Enemies in this region</h3>
    <ul id="current_enemies">
      <% @warband.region.enemies.each do |enemy| %>
      <li>
        <%= link_to enemy.name, battle_before_path(:enemy_id => enemy.id), :class => "engage" %>
      </li>
      <% end %>
    </ul>
  <% else %>
    <a href="#" id="rest">Rest</a>
  <% end %>
</div>
<% content_for :head do %>
  <script>
    var canvas;
    var context;
    var stage;
    var bg;
    var warband;
    var enemy;
    var mapWidth = 500;//$('#map')[0].width;
    var mapHeight = 500; //$('#map')[0].height;
    var enemies = new Array();
    var hasNewPos = false;

    // canvas width and height must be divisible by 100
    var regionWidth = 100;
    var regionHeight = 100;

    var cols = mapWidth/regionWidth;
    var rows = mapHeight/regionHeight;

    var positionRect = new Object();

    var hoverRect = new Object();

    var enemyOffset = Object();
    enemyOffset.x = 5;
    enemyOffset.y = 5;

    // Create two-dimensional array
    var regions = new Array(cols);
    for (var i = 0; i < rows; i++) {
      regions[i] = new Array(rows);
    }

    var offset = Object();
    offset.x = 40;
    offset.y = 40;

    // Do when document is ready
    $(document).ready( function() {

      $("#current_region a#rest").live("click", rest);

      $("#map").live("mousemove", function(e) {
        var pos = getCursorPosition(e);

        var x = Math.floor(pos.x/regionWidth);
        var y = Math.floor(pos.y/regionHeight);
        
        var region = getRegion(x,y);

        hoverRect.x = x*regionWidth;
        hoverRect.y = y*regionHeight;
      });

      // Register a click handler on the canvas (#map)
      $("#map").live("mousedown", function(e) {
        // Get the clicked position
        var pos = getCursorPosition(e);

        var x = Math.floor(pos.x/regionWidth);
        var y = Math.floor(pos.y/regionHeight);
        
        var region = getRegion(x,y);

        // No region found at clicked location, no need to update.
        // FIXME! Show this to the User in some way...
        if (!region) return;
        var warx = Math.floor(warband.x/regionWidth);
        var wary = Math.floor(warband.y/regionHeight);
				if(x === warx && y === wary) {
					var enemy = getClickedEnemy(region, pos);
	        if(enemy) {
	          $(window.location).attr('href', '/battle/before/?enemy_id='+enemy.id);
	          return;
	        }
				}

        // Update the Warband position (database) by sending a PUT request and
        // then the positon of the warband (javascript object) upon success
        var url = "<%= warband_path(@warband) %>"; // Go to warbands/:id path
        var data = { "warband[region_id]": region.id,
                     "_method": "put" }; // Use warbands#update (not show)
        $.post(url, data, updateWarbandPosition, "json");

        return false;
      });

      // Get the canvas
      canvas = $("#map")[0];
  
      // Try to get the context
      if(canvas.getContext) {
        context = canvas.getContext('2d');
        stage = new Kinetic.Stage(canvas, 100);
  
        // stop the user getting a text cursor
        canvas.onselectstart = function()
        {
            return false;
        };

        // Create a background object
        bg = new Object();
        bg.img = new Image();
        bg.img.src = 'images/warbands_bg.png';
        bg.x = 0;
        bg.y = 0;
        bg.img.onload = function() {
          redraw();
        };

        // Create a Warband object
        warband = new Object();
        warband.img = new Image();
        warband.img.src = 'images/huskarl.png';
        warband.img.onload = function() {
          redraw();
        };
        // Get the initial position of the Warband
        warband.x = <%= @warband.region.pos_x %>*regionWidth+offset.x;
        warband.y = <%= @warband.region.pos_y %>*regionHeight+offset.y;
        warband.ax = warband.x; // animation x
        warband.ay = warband.y; // animation y

        positionRect.x = <%= @warband.region.pos_x %>*regionWidth;
        positionRect.y = <%= @warband.region.pos_y %>*regionHeight;

        // Get all the regions of the server and put them in regions array
        initRegions();

        // set updateStage method
        stage.setUpdateStage(updateCanvas);

        // set drawStage method
        stage.setDrawStage(redraw);
        // start animation
        stage.start();

      } else { // No context available
        alert("Sorry, but the Canvas element is not supported by your browser!");
      }
    });

    // update for animation
    function  updateCanvas() {
      if (hasNewPos) {
        if (warband.ax < warband.x) {
          warband.ax += 1;
        } else if (warband.ax > warband.x) {
          warband.ax -= 1;
        }
        if (warband.ay < warband.y) {
          warband.ay += 1;
        } else if (warband.ay > warband.y) {
          warband.ay -= 1;
        }
        if (warband.ax === warband.x && warband.ay === warband.y) {
          hasNewPos = false;
        }
      } 
    }

    function rest() {
      var url = "<%= warband_rest_path(@warband) %>"; // Go to warbands/:id path
      var data = { "warband[id]": <%= @warband.id %>, "_method": "put"}
      $.post(url, data, updateWarbandHealth, "json");
      return false;
    };

    // Update the Warband position from the specified data (.json) and redraw
    function updateWarbandPosition(data) {
      var region = findRegion(data['warband']['region_id']);
      warband.x = region.x*regionWidth + offset.x;
      warband.y = region.y*regionHeight + offset.y;
      // FIXME! Make this a partial to render instead?!
      $("#current_region").html("");
      $("#current_region").append("<h2><a href='/regions/"+region.template_id+"' class='engage'>"+region.name+"</a></h2>");
      $("#current_region").append("<p>"+region.desc+"</p>");
      var enemies = "";
      for (var enemy in region.enemies) {
        e = region.enemies[enemy];
        enemies += '<li><a href="/battle/before?enemy_id='+e.id+'">'+e.name+"</a></li>";
      }
      if (enemies !== "") {
        $("#current_region").append('<h3>Enemies in this region</h3><ul id="current_enemies">').append(enemies).append('</ul>');
      }
      else {
        $("#current_region").append("<a href='' id='rest'>Rest</a>");
      }
      hasNewPos = true;
      positionRect.x = region.x*regionWidth;
      positionRect.y = region.y*regionHeight;
    }

    function updateWarbandHealth(data) {
      $(".hpbar_inner").each(function(index) {
        var member = data["warband"]["members"][index];
        $(this).width(""+member["health"]/member["max_health"]*100+"%");
        $(this).parent().attr("title", "HP: "+member["health"]+"/"+member["max_health"]);
      });
    }

    function findRegion(id) {
      for(var c = 0; c < cols; c++) {
        for(var r = 0; r < rows; r++) {
          if (regions[c][r] && regions[c][r].id == id) {
            return regions[c][r];
          }
        }
      }
      return false;
    }

    function getRegion(x, y) {
      return regions[x][y];
    }

    function getClickedEnemy(region, pos) {
      if (region.enemies.length > 0) { // if there are enemies in the region
        if (pos.x > region.enemies[0].x && pos.x < region.enemies[0].x+22 && // 22 is enemy img width
            pos.y > region.enemies[0].y && pos.y < region.enemies[0].y+28) { // 28 is enemy img height
          return region.enemies[0];
        }
      }
    }
  
    // Redraw all the images of the canvas context
    function redraw() {
      // Clear the canvas
      clearCanvas();

      // Draw the background (map)
      context.drawImage(bg.img, bg.x, bg.y);

      // Draw rects
      context.strokeStyle = "rgba(255,255,255,1)";
      context.strokeRect(hoverRect.x,hoverRect.y,regionWidth,regionHeight);

      context.strokeStyle = "rgba(0,0,0,1)";
      context.strokeRect(positionRect.x,positionRect.y,regionWidth,regionHeight);

      // Draw all enemies
      for (var e in enemies) {
        context.drawImage(enemies[e].img, enemies[e].x, enemies[e].y);
      }
      
      // Draw the warband (on top)
      if ("ax" in warband && "ay" in warband) { 
        context.drawImage(warband.img, warband.ax, warband.ay);
      } else {
        context.drawImage(warband.img, warband.x, warband.y);
      }
    }

    // Get the cursor position (pos.x and pos.y) from the specified event e
    function getCursorPosition(e) {
      var x;
      var y;
      if (e.pageX != undefined && e.pageY != undefined) {
        x = e.pageX;
        y = e.pageY;
      } else {
        x = 0;
        y = 0;
      }
  
      x -= canvas.offsetLeft;
      y -= canvas.offsetTop;
  
      //x = Math.floor(x/80)*80+29;
      //y = Math.floor(y/80)*80+24;
  
      var pos = new Object();
      pos.x = x;
      pos.y = y;
      return pos;
    }
  
    // Clear the canvas
    function clearCanvas() {
      context.clearRect(0, 0, canvas.width, canvas.height);
      var w = canvas.width;
      canvas.width = 1;
      canvas.width = w;
    }

    // Get and initialize all the Regions 
    function initRegions() {
      <% @regions.each do |r| %>
        var region = new Object();
        region.id = <%= r.id %>;
        region.template_id = <%= r.template.id %>;
        region.x = <%= r.pos_x %>;
        region.y = <%= r.pos_y %>;
        region.name = "<%= r.name %>";
        region.desc = "<%= r.desc %>";
        region.enemies = new Array();
        <% r.enemies.each do |e| %>
          var enemy = new Object();
          enemy.x = <%= r.pos_x %>*regionWidth+enemyOffset.x;
          enemy.y = <%= r.pos_y %>*regionHeight+enemyOffset.y;
          enemy.img = new Image();
          enemy.img.src = 'images/enemy.png';
          enemy.name = "<%= e.name %>";
          enemy.id = <%= e.id %>;
          enemy.desc = "<%= e.desc.sub("\r"," ").sub("\n", " ").squeeze %>";
          enemy.max_health = <%= e.max_health %>;
          region.enemies.push(enemy);
          enemies.push(enemy);
        <% end %>
        regions[region.x][region.y] = region;
      <% end %>
    }

  </script>
<% end %>